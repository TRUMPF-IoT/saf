name: .NET Core

on:
  push:
    branches:
      - '**'
    tags:
      - '*'
  pull_request:
    branches: [ master ]

jobs:
  build_test_pack:

    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
        
    - name: Install REUSE
      run: |
        python -m pip install --upgrade pip
        pip install reuse
        
    - name: REUSE Compliance Check
      run: |
        reuse lint
        
    - name: Run minver
      id: minver
      uses: thefringeninja/action-minver@2.0.0-preview1
      
    - name: Setup .NET Core 2.2
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.2.402
        
    - name: Setup .NET Core 3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101
        
    - name: .NET Core SxS Workaround
      run: |
        SET DOTNET_22_ROOT=%DOTNET_ROOT:3.1.101=2.2.402%
        xcopy /s /y /d %DOTNET_22_ROOT% %DOTNET_ROOT%
      shell: cmd
      
    - name: Prepare CDE code signing certificate
      id: createCdeCert
      uses: timheuer/base64-to-file@v1.0.3
      with:
        fileName: 'cdecodesign.pfx'
        encodedString: ${{ secrets.CODESIGNCERT }}
        
    - name: Prepare signtool usage
      run: |
        SET SIGNTOOL=%ProgramFiles(x86)%\Windows Kits\10\bin\10.0.18362.0\x64\signtool.exe
        if not exist "signtool" mkdir "signtool"
        xcopy /y "%SIGNTOOL%" "signtool"
      shell: cmd
      
    - name: Install dependencies
      run: dotnet restore './src/SmartApplicationFramework.sln'
      
    - name: Build
      run: |
        dotnet build './src/SmartApplicationFramework.sln' --configuration Release --no-restore
        
    - name: Sign CDE Plug-ins
      run: |
        .\signtool\signtool.exe sign /f "${{ steps.createCdeCert.outputs.filePath }}" /p "${{ secrets.CODESIGNCERTPASSWORD }}" /tr http://timestamp.digicert.com ".\src\Communication\CDMy.SAF.PubSub.Registry\bin\Release\netstandard2.0\CDMy.SAF.PubSub.Registry.dll"
        .\signtool\signtool.exe sign /f "${{ steps.createCdeCert.outputs.filePath }}" /p "${{ secrets.CODESIGNCERTPASSWORD }}" /tr http://timestamp.digicert.com ".\src\Hosting\CDMy.SmartApplicationFramework\bin\Release\netstandard2.0\CDMy.SmartApplicationFramework.dll"
      shell: cmd
      
    - name: Test
      run: dotnet test './src/SmartApplicationFramework.sln' --configuration Release --no-build --verbosity normal      
      
    - name: Pack
      run: |
        mkdir -p ./artifacts
        dotnet pack './src/SmartApplicationFramework.sln' --configuration Release --no-build --output './artifacts'
        
    - name: Upload artifacts
      if: github.event_name == 'push' && (contains(github.ref, 'refs/tags/') || contains(github.ref, 'refs/heads/master'))
      uses: actions/upload-artifact@v2
      with:
        name: SmartApplicationFramework-${{ steps.minver.outputs.version }}
        path: ./artifacts
      
    - name: Publish nuget packages
      if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
      run: |
        dotnet nuget push ".\artifacts\*.nupkg" --api-key "${{secrets.SAF_NUGETORG_APIKEY}}" --source https://api.nuget.org/v3/index.json
      